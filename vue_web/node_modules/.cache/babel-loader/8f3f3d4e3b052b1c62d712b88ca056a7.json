{"remainingRequest":"C:\\Users\\web\\Desktop\\20190626\\MyProjects\\out_clinic_sys\\vue_web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\web\\Desktop\\20190626\\MyProjects\\out_clinic_sys\\vue_web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\web\\Desktop\\20190626\\MyProjects\\out_clinic_sys\\vue_web\\src\\components\\xz\\cart.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\web\\Desktop\\20190626\\MyProjects\\out_clinic_sys\\vue_web\\src\\components\\xz\\cart.vue","mtime":1564998616711},{"path":"C:\\Users\\web\\Desktop\\20190626\\MyProjects\\out_clinic_sys\\vue_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534853416000},{"path":"C:\\Users\\web\\Desktop\\20190626\\MyProjects\\out_clinic_sys\\vue_web\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\Users\\web\\Desktop\\20190626\\MyProjects\\out_clinic_sys\\vue_web\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      list: [],\n      hh: false\n    };\n  },\n  computed: {},\n  methods: {\n    add: function add(e) {\n      var count = e.target.dataset.count;\n      console.log(count);\n    },\n    selectAll: function selectAll(e) {\n      this.hh = e.target.checked;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          item.cb = this.hh;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n    loadMore: function loadMore() {\n      var _this = this;\n\n      //购物车列表\n      this.axios.get('cart').then(function (res) {\n        console.log(res);\n\n        if (res.data.code == -1) {\n          _this.$messagebox(\"消息\", \"请先登录！\").then(function (res) {\n            _this.$router.push(\"/login\");\n\n            return;\n          });\n        } else {\n          _this.list = res.data.data; // 遍历前，用store对象中的clear()函数初始数量\n\n          _this.$store.commit(\"clear\"); // 创建循环，遍历数组，为每个元素添加cb属性，来标注复选框的状态          \n\n\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = _this.list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var item = _step2.value;\n              item.cb = false; // 循环过程中使用store对象中的increment()函数，计算总数量\n\n              _this.$store.commit(\"increment\");\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n      }).catch(function (err) {\n        console.log(\"程序出错了！\");\n      });\n    },\n    delItem: function delItem(e) {\n      var _this2 = this;\n\n      //{params:obj}\n      var id = e.target.dataset.id;\n      var obj = {\n        id: id\n      };\n      this.$messagebox.confirm(\"是否删除指定商品\").then(function (res) {\n        _this2.axios.get(\"del\", {\n          params: obj\n        }).then(function (res) {\n          if (res.data.code == 1) {\n            //删除成功后， 重新加载购物车列表\n            // console.log(\"删除成功\");\n            _this2.loadMore();\n          }\n        });\n      }).catch(function (err) {// console.log(\"取消删除\");\n      });\n    },\n    delMore: function delMore(e) {\n      var _this3 = this;\n\n      var str = \"\";\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.list[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value;\n\n          if (item.cb) {\n            str += \"\".concat(item.id, \",\");\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      str = str.substring(0, str.length - 1);\n      var ids = {\n        str: str\n      };\n      this.$messagebox.confirm(\"是否删除选中的商品\").then(function (res) {\n        _this3.axios.get('delMore', {\n          params: ids\n        }).then(function (res) {\n          if (res.data.code == 1) {\n            _this3.loadMore();\n\n            _this3.$toast(\"删除成功\");\n          }\n        });\n      }).catch(function (err) {\n        _this3.loadMore();\n      });\n    }\n  },\n  created: function created() {\n    //程序运行时自动加载\n    this.loadMore();\n  }\n};",{"version":3,"sources":["cart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"cart\">\r\n    <label><input type=\"checkbox\" @change=\"selectAll\" v-model=\"hh\">全选</label>\r\n    <div class=\"cart_item\" v-for=\"(item,i) of list\" :key=\"i\">\r\n      <div class=\"left\">\r\n        <input type=\"checkbox\" :data-id=\"item.id\" v-model=\"item.cb\">\r\n        <img :src=\"item.sm\">\r\n        <div class=\"name\">{{item.lname}}</div>        \r\n        <!-- 增删按钮 -->\r\n        <button @click=\"add\" :data-count=\"item.count\">-</button>\r\n          {{item.count}}\r\n        <button :data-count=\"item.count\" @click=\"add\">+</button>\r\n      </div>\r\n      <div class=\"price\">{{item.price}}</div>\r\n      <mt-button @click=\"delItem\" :data-id=\"item.id\">删除</mt-button>\r\n    </div>\r\n    <div>     \r\n       <!-- 将main.js中的store对象中的数据读取出来 -->\r\n      购物车中商品个数：{{$store.getters.getCartCount}}<br>\r\n      数量小计：<span></span>\r\n      <mt-button @click=\"delMore\" >删除选中商品</mt-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data(){return {\r\n    list:[],  \r\n    hh:false,\r\n  }},\r\n  computed:{},\r\n  methods:{\r\n    add(e){\r\n      var count=e.target.dataset.count;\r\n      console.log(count);\r\n    },\r\n    selectAll(e){\r\n      this.hh=e.target.checked\r\n      for(var item of this.list){\r\n        item.cb=this.hh;\r\n      }\r\n    },\r\n    loadMore(){//购物车列表\r\n      this.axios.get('cart').then(res=>{\r\n        console.log(res);\r\n        if(res.data.code==-1){\r\n            this.$messagebox(\"消息\",\"请先登录！\").then(res=>{\r\n            this.$router.push(\"/login\");\r\n            return;\r\n          })\r\n        }else{\r\n          this.list=res.data.data;\r\n          // 遍历前，用store对象中的clear()函数初始数量\r\n          this.$store.commit(\"clear\");\r\n          // 创建循环，遍历数组，为每个元素添加cb属性，来标注复选框的状态          \r\n          for(var item of this.list){\r\n            item.cb=false;\r\n            // 循环过程中使用store对象中的increment()函数，计算总数量\r\n            this.$store.commit(\"increment\");\r\n          }\r\n        }\r\n      }).catch(err=>{console.log(\"程序出错了！\")})\r\n    },\r\n    delItem(e){  //{params:obj}\r\n      var id=e.target.dataset.id;\r\n      var obj={id};      \r\n      this.$messagebox.confirm(\"是否删除指定商品\").then(res=>{\r\n        this.axios.get(\"del\",{params:obj}).then(res=>{\r\n          if(res.data.code==1){ //删除成功后， 重新加载购物车列表\r\n            // console.log(\"删除成功\");\r\n            this.loadMore();\r\n          }\r\n        })\r\n      }).catch(err=>{\r\n        // console.log(\"取消删除\");\r\n      })   \r\n    },\r\n    delMore(e){\r\n      var str=\"\";\r\n      for(var item of this.list){\r\n        if(item.cb){\r\n          str+=`${item.id},`;\r\n        } \r\n      }\r\n      str=str.substring(0,str.length-1);\r\n      var ids={str}; \r\n      this.$messagebox.confirm(\"是否删除选中的商品\").then(res=>{\r\n        this.axios.get('delMore',{params:ids}).then(res=>{\r\n          if(res.data.code==1){\r\n            this.loadMore();\r\n            this.$toast(\"删除成功\");\r\n          }\r\n        })\r\n      }).catch(err=>{this.loadMore()});      \r\n    },\r\n  },created(){//程序运行时自动加载\r\n    this.loadMore();\r\n  }\r\n}\r\n</script>\r\n<style>\r\n\r\n.cart .cart_item .left{\r\n  display:flex;\r\n  justify-content: space-between;\r\n\r\n}\r\n\r\n.cart .cart_item{\r\n  display:flex;\r\n  justify-content: space-between;\r\n  border-bottom:1px solid #ddd;\r\n  padding:10px;\r\n}\r\n.cart .cart_item .left .name,\r\n.cart .cart_item .left .price{\r\n  height:54px;line-height:54px;\r\n}\r\n.cart .cart_item .left .price{color:#f00;}\r\n</style>\r\n\r\n"],"sourceRoot":"src\\components\\xz"}]}